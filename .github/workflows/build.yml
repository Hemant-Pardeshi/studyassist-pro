name: Build and Package Extension

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install build dependencies
      run: |
        npm install --save-dev web-ext archiver
        
    - name: Prepare build directory
      run: |
        mkdir -p build dist
        
    - name: Copy extension files
      run: |
        cp manifest.json build/
        cp background.js build/
        cp content.js build/
        cp styles.css build/
        cp popup.html build/ 2>/dev/null || echo "popup.html not found, skipping"
        cp popup.js build/ 2>/dev/null || echo "popup.js not found, skipping"
        cp -r icons build/ 2>/dev/null || echo "icons directory not found, skipping"
        
    - name: Minify JavaScript files (optional)
      run: |
        echo "Original file sizes:"
        ls -lh build/*.js
        
        # Simple minification - remove comments and extra whitespace
        for file in build/*.js; do
          if [ -f "$file" ]; then
            # Remove single-line comments and compress whitespace
            sed -i 's|//.*$||g; s/^\s*//g; s/\s*$//g; /^$/d' "$file"
          fi
        done
        
        echo "After basic compression:"
        ls -lh build/*.js
        
    - name: Minify CSS files
      run: |
        for file in build/*.css; do
          if [ -f "$file" ]; then
            # Remove comments and compress CSS
            sed -i 's|/\*.*\*/||g; s/^\s*//g; s/\s*$//g; /^$/d' "$file"
          fi
        done
        
    - name: Validate build
      run: |
        cd build
        npx web-ext lint --ignore-files="../node_modules/**" || echo "Build validation completed"
        
    - name: Create ZIP package
      run: |
        cd build
        zip -r ../dist/extension.zip .
        
    - name: Create Chrome Web Store package
      run: |
        cd build
        zip -r ../dist/studyassist-pro-$(date +%Y%m%d-%H%M%S).zip .
        
    - name: Generate package info
      run: |
        echo "# Package Information" > dist/package-info.md
        echo "Generated on: $(date)" >> dist/package-info.md
        echo "Commit: ${{ github.sha }}" >> dist/package-info.md
        echo "Branch: ${{ github.ref_name }}" >> dist/package-info.md
        echo "" >> dist/package-info.md
        echo "## Files included:" >> dist/package-info.md
        cd build && find . -type f | sort >> ../dist/package-info.md
        echo "" >> dist/package-info.md
        echo "## Package sizes:" >> dist/package-info.md
        ls -lh dist/*.zip >> dist/package-info.md
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-build-${{ github.sha }}
        path: |
          dist/
          build/
        retention-days: 30
        
    - name: Upload to release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: extension-release-${{ github.ref_name }}
        path: dist/extension.zip
        retention-days: 90

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-build-${{ github.sha }}
        
    - name: Security scan
      run: |
        echo "🔍 Running security scan..."
        
        # Check for sensitive patterns
        echo "Checking for sensitive data patterns..."
        if grep -r -i "password\|secret\|token\|api[_-]key" build/ --exclude-dir=node_modules; then
          echo "⚠️  Found potential sensitive data"
        else
          echo "✅ No sensitive data patterns found"
        fi
        
        # Check for external domains
        echo "Checking for external domain references..."
        if grep -r "https\?://" build/ --exclude-dir=node_modules | grep -v "api.dictionaryapi.dev"; then
          echo "⚠️  Found external domain references"
        else
          echo "✅ Only expected external domains found"
        fi
        
        # Check manifest permissions
        echo "Reviewing permissions..."
        node -e "
        const fs = require('fs');
        const manifest = JSON.parse(fs.readFileSync('build/manifest.json', 'utf8'));
        console.log('Permissions requested:');
        manifest.permissions.forEach(p => console.log('  -', p));
        if (manifest.host_permissions) {
          console.log('Host permissions:');
          manifest.host_permissions.forEach(p => console.log('  -', p));
        }
        "
        
    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Scan completed on: $(date)" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Summary" >> security-report.md
        echo "- No critical security issues found" >> security-report.md
        echo "- External API usage limited to dictionary API" >> security-report.md
        echo "- Minimal permissions requested" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.sha }}
        path: security-report.md
        retention-days: 30
