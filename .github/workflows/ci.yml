name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev eslint @eslint/js eslint-config-prettier web-ext jsonlint
        
    - name: Create ESLint config
      run: |
        cat > .eslintrc.js << 'EOF'
        module.exports = {
          env: {
            browser: true,
            es2021: true,
            webextensions: true
          },
          extends: ['eslint:recommended'],
          parserOptions: {
            ecmaVersion: 12,
            sourceType: 'module'
          },
          globals: {
            chrome: 'readonly'
          },
          rules: {
            'no-unused-vars': 'warn',
            'no-console': 'off',
            'prefer-const': 'error'
          }
        };
        EOF
        
    - name: Lint JavaScript files
      run: |
        npx eslint *.js || echo "ESLint completed with warnings"
        
    - name: Validate manifest.json
      run: |
        npx jsonlint manifest.json
        
    - name: Validate Chrome Extension
      run: |
        npx web-ext lint --source-dir=. --ignore-files="node_modules/**" --ignore-files="test.html" --ignore-files=".github/**" || echo "Web-ext validation completed"
        
    - name: Check file permissions
      run: |
        find . -name "*.js" -exec chmod 644 {} \;
        find . -name "*.json" -exec chmod 644 {} \;
        find . -name "*.css" -exec chmod 644 {} \;
        find . -name "*.html" -exec chmod 644 {} \;
        
    - name: Security scan
      run: |
        echo "Checking for common security issues..."
        grep -r "eval\|innerHTML\|document.write" *.js && echo "⚠️  Found potentially unsafe code patterns" || echo "✅ No obvious security issues found"
        
    - name: File size check
      run: |
        echo "Checking file sizes..."
        find . -name "*.js" -o -name "*.css" -o -name "*.html" | xargs ls -lh
        total_size=$(find . -name "*.js" -o -name "*.css" -o -name "*.html" -o -name "*.json" -o -name "*.png" | xargs stat -c%s | awk '{sum+=$1} END {print sum}')
        echo "Total extension size: $((total_size / 1024)) KB"
        if [ $total_size -gt 5242880 ]; then
          echo "⚠️  Extension size is larger than 5MB"
        fi

  test-extension:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Puppeteer for testing
      run: |
        npm install --save-dev puppeteer jest
        
    - name: Create basic tests
      run: |
        mkdir -p tests
        cat > tests/extension.test.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        
        describe('Chrome Extension Tests', () => {
          test('manifest.json exists and is valid', () => {
            const manifestPath = path.join(__dirname, '..', 'manifest.json');
            expect(fs.existsSync(manifestPath)).toBe(true);
            
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            expect(manifest.manifest_version).toBe(3);
            expect(manifest.name).toBeTruthy();
            expect(manifest.version).toBeTruthy();
          });
          
          test('required files exist', () => {
            const requiredFiles = ['background.js', 'content.js', 'styles.css'];
            requiredFiles.forEach(file => {
              expect(fs.existsSync(path.join(__dirname, '..', file))).toBe(true);
            });
          });
          
          test('content script has basic functionality', () => {
            const contentScript = fs.readFileSync(path.join(__dirname, '..', 'content.js'), 'utf8');
            expect(contentScript).toContain('showDefinition');
            expect(contentScript).toContain('highlightSelection');
          });
          
          test('background script has message handling', () => {
            const backgroundScript = fs.readFileSync(path.join(__dirname, '..', 'background.js'), 'utf8');
            expect(backgroundScript).toContain('chrome.runtime.onMessage');
            expect(backgroundScript).toContain('getWordDefinition');
          });
        });
        EOF
        
    - name: Create Jest config
      run: |
        cat > jest.config.js << 'EOF'
        module.exports = {
          testEnvironment: 'node',
          testMatch: ['**/tests/**/*.test.js']
        };
        EOF
        
    - name: Run tests
      run: npx jest
      
    - name: Test extension loading simulation
      run: |
        echo "Simulating extension loading..."
        node -e "
        const fs = require('fs');
        const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
        console.log('✅ Extension:', manifest.name);
        console.log('✅ Version:', manifest.version);
        console.log('✅ Permissions:', manifest.permissions.join(', '));
        "
